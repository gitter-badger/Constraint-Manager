import yaml
from .interface import Interface
from .part import Part
from .utils_pkg import ppformat
from pprint import pprint
from os.path import splitext, join as path_join
from glob import glob
import logging


LOGGER = logging.getLogger(__name__)

class Design:
  """ The Design class contains information about a full design, which may implement many interfaces.
    
  """
  def __init__(self, yaml_dir):
    self.parse_yamls(yaml_dir)
  def __str__(self):
    return ppformat(self.__dict__)
  def __repr__(self):
    return str(self)


  def parse_interface(self, interface, from_yaml):
    """ Parses all information about a given interface in this design and updates the given Interface.
    
    :param from_yaml: A nested dictionary containing all information about this interface.
                      Structure will be generated by tool.  TODO: Generation
    :type from_yaml: dict
    :param from_yaml: An Interface into which to parse the dictionary.
    :type from_yaml: dict
    :return: Returns the provided interface object (and modifies it inline)
    :rtype: Interface
    """

    for name, props in from_yaml['dsn_variables'].items():
      interface.dsn_variables[name].value = props['value']
    for name, props in from_yaml['signals'].items():
      interface.signals[name].value = props

    part_constants = Part(from_yaml['part']).interfaces[interface.name]
    for part_constant, value in part_constants.items():
      interface.part_constants[part_constant].value = value


    return interface


  def parse_yaml(self, yaml_file):
    """ Parses a given yaml file and adds to list of interfaces for this design.
    
    :param yaml_file: A A file path for a design interface specification file.
    :type yaml_file: str
    """

    file_name, ext = splitext(yaml_file)
    name, interface_name = file_name.rsplit('_', 1)
    interface = Interface(interface_name)
    with open(yaml_file, 'r') as f:
      try:
        yaml_dict = yaml.safe_load(f)
      except yaml.YAMLError as exc:
        print(exc)

    self.interfaces.append(self.parse_interface(interface, yaml_dict))


  def parse_yamls(self, yaml_dir):
    """ Parses all yaml files in the specified directory.
    
    :param yaml_dir: A A directory containing yaml files specifying design interfaces.
    :type yaml_file: str
    """
    self.interfaces = []
    yaml_files = glob(path_join(yaml_dir, '*.yml'))
    if (yaml_files == []):
      LOGGER.warning(f'No yamls found in {yaml_dir}')
    for yaml_file in yaml_files:
      self.parse_yaml(yaml_file)

  def gen_constraints(self):
    """ Generates a string representation of all constraints in this design.
    
    :return constraints: A string representation of all constraints in this design.
    :rtype: str 
    """
    constraints = []
    for interface in self.interfaces:
      if_constraints = interface.gen_constraints()
      constraints.extend(if_constraints)
    constraints = '\n'.join(constraints) + '\n'
    return constraints




